model FileEntity {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  isFolder  Boolean
  parentId  Int?
  path      String?
  size      Int?
  mimeType  String?
  url       String?
  createdAt DateTime @default(now())

  parent    FileEntity? @relation("FolderParent", fields: [parentId], references: [id])
  children  FileEntity[] @relation("FolderParent")
  user      User        @relation(fields: [userId], references: [id])
}
// Prisma schema для локальной разработки - SQLite

datasource db {
  provider = "postgresql"
  url        = env("DATABASE_URL")   // для работы приложения (pooler:6543)
  // directUrl  = env("DIRECT_URL")     // для миграций (db:5432) - только для продакшна
}

generator client {
  provider = "prisma-client-js"
}

model Service {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  extraInfo   String?
  details     ServiceDetails[]
  articles    Article[]
}

model ServiceDetails {
  id          Int     @id @default(autoincrement())
  category    String
  services    String
  serviceId   Int?
  service     Service? @relation(fields: [serviceId], references: [id])
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String?
  role      String    @default("user")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
  files     File[]
  folders   Folder[]
  fileEntities FileEntity[]
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  excerpt     String?
  slug        String   @unique
  published   Boolean  @default(false)
  categoryId  Int?
  authorId    Int
  documents   Json?    // Список документов к статье в формате JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  author      User     @relation(fields: [authorId], references: [id])
  category    Service? @relation(fields: [categoryId], references: [id])
  tags        ArticleTag[]
}

model Tag {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  color       String?
  createdAt   DateTime @default(now())
  
  articles    ArticleTag[]
}

model ArticleTag {
  articleId   Int
  tagId       Int
  
  article     Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag         Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([articleId, tagId])
}

model File {
  id          Int      @id @default(autoincrement())
  originalName String
  filename     String   @unique
  path         String   // Логический путь в storage (без домена)
  virtualPath  String   @default("") // Виртуальный путь для отображения
  virtualId    String?  @unique // Уникальный виртуальный идентификатор (необязательный)
  mimeType     String
  size         Int
  uploadedBy   Int
  folderId     Int?
  createdAt    DateTime @default(now())
  
  uploader     User     @relation(fields: [uploadedBy], references: [id])
  folder       Folder?  @relation(fields: [folderId], references: [id])
  
  @@index([uploadedBy])
  @@index([virtualPath])
  @@index([virtualId])
}

model Folder {
  id          Int      @id @default(autoincrement())
  name        String
  path        String
  virtualPath String?  // Виртуальный путь для отображения (необязательный)
  virtualId   String?  @unique // Уникальный виртуальный идентификатор (необязательный)
  ownerId     Int
  parentId    Int?
  createdAt   DateTime @default(now())
  
  owner       User     @relation(fields: [ownerId], references: [id])
  parent      Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children    Folder[] @relation("FolderHierarchy")
  files       File[]
  
  @@unique([ownerId, path])
  @@index([virtualPath])
  @@index([virtualId])
}
