import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('üñºÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ hero-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É—Å–ª—É–≥...')

  // –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —É—Å–ª—É–≥ –Ω–∞ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
  const serviceImageMap: Record<string, string> = {
    '–ù–∞–ª–æ–≥–æ–≤–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞': '/img/services/tax-hero.png',
    '–ù–∞–ª–æ–≥–æ–≤–æ–µ –ø—Ä–∞–≤–æ': '/img/services/tax-hero.png',
    '–£—Å–ª—É–≥–∏ –Ω–∞–ª–æ–≥–æ–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏': '/img/services/tax-hero.png',
    '–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ': '/img/services/bankruptcy-hero.png',
    '–£—Å–ª—É–≥–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞': '/img/services/bankruptcy-hero.png',
    '–°–ø–æ—Ä—ã –∏ –∞—Ä–±–∏—Ç—Ä–∞–∂': '/img/services/dispute-hero.png',
    '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–ø–æ—Ä–æ–≤ –∏ –≤–∑—ã—Å–∫–∞–Ω–∏–µ': '/img/services/dispute-hero.png',
    '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å': '/img/services/intellectual-hero.png',
    '–£—Å–ª—É–≥–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ –∏–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –ø—Ä–∞–≤–∞–º': '/img/services/intellectual-hero.png',
    '–ß–∞—Å—Ç–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞': '/img/services/bankruptcy-hero.png', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    '–£—Å–ª—É–≥–∏ –ø–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º—É —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—é –±–∏–∑–Ω–µ—Å–∞': '/img/services/bankruptcy-hero.png', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  }

  let updatedCount = 0
  let skippedCount = 0

  for (const [serviceTitle, imagePath] of Object.entries(serviceImageMap)) {
    try {
      const service = await prisma.service.findFirst({
        where: {
          OR: [
            { title: serviceTitle },
            { title: { contains: serviceTitle } }
          ]
        }
      })

      if (service) {
        await prisma.service.update({
          where: { id: service.id },
          data: { heroImage: imagePath }
        })
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${service.title} -> ${imagePath}`)
        updatedCount++
      } else {
        console.log(`‚ö†Ô∏è  –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${serviceTitle}`)
        skippedCount++
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏ "${serviceTitle}":`, error)
    }
  }

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`)
  console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}`)
  console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`)
  console.log('‚úÖ Seed –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
}

main()
  .catch((e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ seed:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
