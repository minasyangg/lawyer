const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function main() {
  try {
    console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º seeding –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ä–æ–º–µ —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –∏–º–µ–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
    await prisma.user.deleteMany({
      where: {
        role: {
          not: {
            in: ['ADMIN', 'EDITOR', 'USER']
          }
        }
      }
    });

    // –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
    const adminPassword = 'AdminPass123!'; // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω
    const hashedPassword = await bcrypt.hash(adminPassword, 12);

    const admin = await prisma.user.upsert({
      where: { email: 'admin@lawyer-site.com' },
      update: {
        name: 'System Administrator',
        password: hashedPassword,
        role: 'ADMIN',
        status: 'ACTIVE',
        isActive: true,
        emailVerified: true,
        twoFactorEnabled: false, // –ë—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
        failedLoginAttempts: 0,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      create: {
        name: 'System Administrator',
        email: 'admin@lawyer-site.com',
        password: hashedPassword,
        role: 'ADMIN',
        status: 'ACTIVE',
        isActive: true,
        emailVerified: true,
        twoFactorEnabled: false,
        failedLoginAttempts: 0
      }
    });

    console.log('‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:');
    console.log(`   Email: admin@lawyer-site.com`);
    console.log(`   –ü–∞—Ä–æ–ª—å: ${adminPassword}`);
    console.log(`   üîí –í–ê–ñ–ù–û: –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!`);
    console.log(`   üì± 2FA –±—É–¥–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ`);

    console.log('‚úÖ Seeding –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ seeding:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

main();
