const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function main() {
  console.log('🔧 Связывание и заполнение деталей услуг...\n')

  // Сначала удаляем все существующие детали
  await prisma.serviceDetails.deleteMany({})
  console.log('🗑️  Старые детали удалены\n')

  // Получаем все услуги
  const services = await prisma.service.findMany()
  
  // Данные услуг по категориям
  const serviceDetailsMap = {
    'Услуги налоговой практики': [
      {
        category: 'Налоговые споры',
        services: `1. Представительство в налоговых спорах всех инстанций
2. Обжалование актов налоговых проверок
3. Защита от необоснованных доначислений
4. Споры о возмещении НДС
5. Споры о применении налоговых вычетов
6. Защита от привлечения к налоговой ответственности`
      },
      {
        category: 'Налоговый консалтинг',
        services: `1. Налоговое планирование и оптимизация
2. Налоговый due diligence при сделках M&A
3. Консультирование по трансфертному ценообразованию
4. Разработка схем налогово-эффективного структурирования бизнеса
5. Сопровождение налоговых проверок
6. Аудит налоговых рисков`
      }
    ],
    'Услуги практики банкротства': [
      {
        category: 'Услуги практики банкротства',
        services: `1. Антикризисный комплаенс
2. Сопровождение процедуры банкротства
3. Антикризисный план
4. Защита от субсидиарной ответственности
5. Дорожная карта проекта по банкротству
6. Защита личных активов при банкротстве
7. Предупреждение рисков привлечения КДЛ к субсидиарной ответственности
8. Взыскание долгов через банкротство
9. Привлечение к субсидиарной ответственности
10. Оспаривание сделки в процедуре банкротства
11. Банкротный DUE DILIGENCE сделок`
      }
    ],
    'Разрешение споров и взыскание': [
      {
        category: 'Споры и взыскание',
        services: `1. Защита интересов в спорах по договорным обязательствам
2. Споры в сфере IT
3. Банкротные споры
4. Споры о защите права собственности
5. Споры по строительному подряду
6. Споры по договору поставки
7. Защита предпринимателей в гособоронзаказе и закупках
8. Взыскание задолженности
9. Представительство в арбитражных судах`
      }
    ],
    'Услуги по комплексному сопровождению бизнеса': [
      {
        category: 'Комплексное сопровождение',
        services: `1. Абонентское юридическое обслуживание
2. Корпоративное право и M&A сделки
3. Договорная работа и правовая экспертиза
4. Сопровождение сделок с недвижимостью
5. Трудовое право и кадровое делопроизводство
6. Регистрация и ликвидация юридических лиц
7. Защита деловой репутации
8. Комплаенс и внутренние расследования`
      }
    ],
    'Услуги практики по интеллектуальным правам': [
      {
        category: 'Интеллектуальные права',
        services: `1. Регистрация и защита товарных знаков
2. Патентование изобретений и полезных моделей
3. Защита авторских и смежных прав
4. Споры о нарушении интеллектуальных прав
5. Лицензионные договоры
6. Защита коммерческой тайны и ноу-хау
7. IT-право и защита ПО
8. Franchise и франчайзинг`
      }
    ],
    'Услуги частным клиентам': [
      {
        category: 'Частным клиентам',
        services: `1. Семейные споры и раздел имущества
2. Наследственное право
3. Жилищные споры
4. Защита прав потребителей
5. Трудовые споры
6. Возмещение ущерба
7. Защита чести и достоинства
8. Административные правонарушения`
      }
    ]
  }

  let createdCount = 0

  for (const service of services) {
    const detailsData = serviceDetailsMap[service.title]
    
    if (!detailsData) {
      console.log(`⚠️  Нет данных для: ${service.title}`)
      continue
    }

    console.log(`📋 Создание деталей для: ${service.title}`)
    
    for (const detail of detailsData) {
      await prisma.serviceDetails.create({
        data: {
          category: detail.category,
          services: detail.services,
          serviceId: service.id
        }
      })
      console.log(`  ✅ Создана деталь: ${detail.category}`)
      createdCount++
    }
    console.log()
  }

  console.log(`\n📊 Результат:`)
  console.log(`   Создано деталей: ${createdCount}`)
  console.log('✅ Seed выполнен успешно!')
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });