const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkUsers() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
    
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        name: true,
        userRole: true,
        status: true,
        emailVerified: true
      }
    });

    if (users.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`);
    
    users.forEach((user, index) => {
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${index + 1}:`);
      console.log(`   ID: ${user.id}`);
      console.log(`   Email: ${user.email}`);
      console.log(`   –ò–º—è: ${user.name}`);
      console.log(`   –†–æ–ª—å: ${user.userRole}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${user.status}`);
      console.log(`   Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: ${user.emailVerified}`);
      console.log('');
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∞–¥–º–∏–Ω–∞
    const admin = await prisma.user.findUnique({
      where: { email: 'admin@ya.ru' }
    });

    if (admin) {
      console.log('‚úÖ –ê–¥–º–∏–Ω –Ω–∞–π–¥–µ–Ω:');
      console.log(`   Email: ${admin.email}`);
      console.log(`   –†–æ–ª—å: ${admin.userRole}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${admin.status}`);
    } else {
      console.log('‚ùå –ê–¥–º–∏–Ω admin@ya.ru –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkUsers();