import { NextRequest, NextResponse } from 'next/server'

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl

  // –ó–∞—â–∏—Ç–∞ API —Ä–æ—É—Ç–æ–≤
  if (pathname.startsWith('/api/tags')) {
    
    const sessionCookie = request.cookies.get('admin-session')

    if (!sessionCookie?.value) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    try {
      const user = JSON.parse(sessionCookie.value)
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–µ–≥–∞–º–∏
      if (pathname.startsWith('/api/tags') && 
          (request.method === 'POST' || request.method === 'PUT' || request.method === 'DELETE')) {
        if (user.userRole !== 'ADMIN' && user.userRole !== 'EDITOR') {
          return NextResponse.json({ error: 'Access denied' }, { status: 403 })
        }
      }
    } catch {
      return NextResponse.json({ error: 'Invalid session' }, { status: 401 })
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
  if (pathname.startsWith('/admin') && !pathname.startsWith('/admin/login')) {
    console.log('üîç Middleware: Checking admin access for path:', pathname)
    const sessionCookie = request.cookies.get('admin-session')

    if (!sessionCookie?.value) {
      console.log('‚ùå Middleware: No session cookie found')
      return NextResponse.redirect(new URL('/admin/login', request.url))
    }

    try {
      const user = JSON.parse(sessionCookie.value)
      console.log('üîç Middleware: Session data:', user)
      
      // –¢–æ–ª—å–∫–æ ADMIN –º–æ–∂–µ—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∞–¥–º–∏–Ω –æ–±–ª–∞—Å—Ç—å
      if (user.userRole !== 'ADMIN') {
        console.log('‚ùå Middleware: Access denied - user role is:', user.userRole)
        return NextResponse.redirect(new URL('/admin/login', request.url))
      }
      
      console.log('‚úÖ Middleware: Admin access granted')
    } catch (error) {
      console.log('‚ùå Middleware: Error parsing session cookie:', error)
      return NextResponse.redirect(new URL('/admin/login', request.url))
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ editor –ø–∞–Ω–µ–ª–∏
  if (pathname.startsWith('/editor')) {
    const sessionCookie = request.cookies.get('admin-session')

    if (!sessionCookie?.value) {
      return NextResponse.redirect(new URL('/admin/login', request.url))
    }

    try {
      const user = JSON.parse(sessionCookie.value)
      
      // –¢–æ–ª—å–∫–æ EDITOR –º–æ–∂–µ—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –≤ editor –æ–±–ª–∞—Å—Ç—å
      if (user.userRole !== 'EDITOR') {
        return NextResponse.redirect(new URL('/admin/login', request.url))
      }
      
    } catch {
      return NextResponse.redirect(new URL('/admin/login', request.url))
    }
  }

  // –ó–∞—â–∏—â–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
  if (pathname.startsWith('/uploads/')) {
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –∏–∑ uploads
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—å—è—Ö
    return NextResponse.next()
  }

  return NextResponse.next()
}

export const config = {
  matcher: [
    '/api/files/:path*',
    '/api/tags/:path*',
    '/admin/:path*',
    '/editor/:path*',
    '/uploads/:path*'
  ]
}