import { StorageFactory } from '../lib/storage/factory';
import { getStorageInfo } from '../lib/utils/universal-file-utils';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É
export async function testStorageConnection() {
  try {
    console.log('üß™ Starting storage connection test...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
    const storageInfo = getStorageInfo();
    console.log('üì¶ Storage Info:', storageInfo);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ö—Ä–∞–Ω–µ–Ω–∏—è
    const provider = StorageFactory.getProvider();
    console.log(`üîó Using provider: ${provider.name}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    console.log('üìã Testing connection by listing root files...');
    const files = await provider.list('');
    console.log(`‚úÖ Connection successful! Found ${files.length} items in root`);
    
    // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (files.length > 0) {
      console.log('üìÅ First few items:');
      files.slice(0, 5).forEach(file => {
        console.log(`  - ${file.name} (${file.isDirectory ? 'folder' : 'file'}) - ${file.size} bytes`);
      });
    }
    
    return {
      success: true,
      provider: provider.name,
      filesCount: files.length,
      message: 'Storage connection test passed!'
    };
    
  } catch (error) {
    console.error('‚ùå Storage connection test failed:', error);
    
    return {
      success: false,
      provider: 'unknown',
      error: error instanceof Error ? error.message : 'Unknown error',
      message: 'Storage connection test failed!'
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
export async function uploadTestFile() {
  try {
    console.log('üì§ Starting test file upload...');
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    const testContent = `Test file created at: ${new Date().toISOString()}\nStorage provider: ${getStorageInfo().provider}`;
    const testFile = new File([testContent], 'test-connection.txt', { type: 'text/plain' });
    const testPath = `test/connection-test-${Date.now()}.txt`;
    
    const provider = StorageFactory.getProvider();
    console.log(`üì§ Uploading test file using ${provider.name} provider...`);
    
    const result = await provider.upload(testFile, testPath);
    
    if (result.success) {
      console.log('‚úÖ Test file uploaded successfully!');
      console.log('üìç File path:', result.path);
      console.log('üåê File URL:', result.url);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const exists = await provider.exists(testPath);
      console.log('üîç File exists check:', exists);
      
      return {
        success: true,
        path: result.path,
        url: result.url,
        size: result.size,
        provider: provider.name,
        message: 'Test file uploaded successfully!'
      };
    } else {
      throw new Error(result.error || 'Upload failed');
    }
    
  } catch (error) {
    console.error('‚ùå Test file upload failed:', error);
    
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
      message: 'Test file upload failed!'
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
export async function runFullStorageTest() {
  console.log('üöÄ Running full storage test suite...');
  console.log('=' .repeat(50));
  
  // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const connectionTest = await testStorageConnection();
  console.log('\nüìã Connection Test Result:', connectionTest);
  
  // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
  const uploadTest = await uploadTestFile();
  console.log('\nüì§ Upload Test Result:', uploadTest);
  
  console.log('\n' + '='.repeat(50));
  console.log('üèÅ Storage test suite completed!');
  
  return {
    connection: connectionTest,
    upload: uploadTest,
    overall: connectionTest.success && uploadTest.success
  };
}
