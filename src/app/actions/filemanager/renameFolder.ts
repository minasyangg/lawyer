"use server"

import { PrismaClient } from '@prisma/client'
import { cookies } from 'next/headers'
import { createClient } from '@supabase/supabase-js'
import { renameFolderSchema } from '@/lib/validations/folder'

const prisma = new PrismaClient()

export interface RenameFolderResult {
  success: boolean
  folder?: {
    id: number
    originalName: string
    filename: string
    mimeType: string
    size: number
    createdAt: string
    url: string
    isFolder: boolean
    path: string
  }
  error?: string
}

/**
 * –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–ø–∫—É
 * @param folderId ID –ø–∞–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
 * @param newName –Ω–æ–≤–æ–µ –∏–º—è –ø–∞–ø–∫–∏
 */
export async function renameFolder(folderId: number, newName: string): Promise<RenameFolderResult> {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ –≤ Supabase Storage
  const moveSupabaseFolder = async (oldPath: string, newPath: string, folderId: number): Promise<boolean> => {
    try {
      console.log('üîÑ Moving Supabase folder physically:', { oldPath, newPath, folderId })
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º–æ–π –ø–∞–ø–∫–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
      const getAllFilesInFolder = async (folderId: number) => {
        const allFiles: {id: number, path: string, filename: string, originalName: string}[] = []
        
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä—è–º—É—é –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ
        const directFiles = await prisma.file.findMany({
          where: { folderId: folderId }
        })
        allFiles.push(...directFiles)
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –ø–∞–ø–∫–∏
        const childFolders = await prisma.folder.findMany({
          where: { parentId: folderId }
        })
        
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –¥–æ—á–µ—Ä–Ω–∏—Ö –ø–∞–ø–æ–∫
        for (const childFolder of childFolders) {
          const childFiles = await getAllFilesInFolder(childFolder.id)
          allFiles.push(...childFiles)
        }
        
        return allFiles
      }
      
      const allFiles = await getAllFilesInFolder(folderId)
      
      console.log(`üìÇ Found ${allFiles.length} files to move recursively`)
      
      if (allFiles.length === 0) {
        console.log('‚úÖ No files to move, folder rename successful')
        return true
      }
      
      // –°–æ–∑–¥–∞–µ–º supabase client
      const supabase = createClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.SUPABASE_SERVICE_ROLE_KEY!
      )
      
      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –≤ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ
      const movePromises = allFiles.map(async (file) => {
        // –î–ª—è Supabase Storage –ø—É—Ç—å —Ñ–∞–π–ª–∞ —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (user_X/...)
        // –ù–µ –Ω—É–∂–Ω–æ —É–±–∏—Ä–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å uploads/, –µ–≥–æ –Ω–µ—Ç –≤ –æ–±–ª–∞—á–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        const storagePath = file.path
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —Ñ–∞–π–ª–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        const newStoragePath = storagePath.replace(oldPath, newPath)
        
        console.log(`üîÑ Moving file:`, {
          originalPath: file.path,
          storagePath,
          newStoragePath,
          oldPath,
          newPath
        })
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º copy + remove –≤–º–µ—Å—Ç–æ move –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        console.log(`üìã Copying file from ${storagePath} to ${newStoragePath}`)
        const { data: copyData, error: copyError } = await supabase.storage
          .from('AlexSiteStoragePublic')
          .copy(storagePath, newStoragePath)
        
        if (copyError) {
          console.error(`‚ùå Failed to copy file ${storagePath} to ${newStoragePath}:`, copyError)
          throw copyError
        }
        
        console.log(`‚úÖ File copied successfully, now removing old file ${storagePath}`)
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
        const { error: removeError } = await supabase.storage
          .from('AlexSiteStoragePublic')
          .remove([storagePath])
        
        if (removeError) {
          console.error(`‚ùå Failed to remove old file ${storagePath}:`, removeError)
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª —É–∂–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω
        } else {
          console.log(`‚úÖ Old file removed successfully: ${storagePath}`)
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å —Ñ–∞–π–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        // –î–ª—è Supabase Storage –ø—É—Ç—å —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º uploads/
        await prisma.file.update({
          where: { id: file.id },
          data: { path: newStoragePath }
        })
        
        console.log(`‚úÖ Successfully moved file: ${file.filename}`)
        return copyData
      })
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
      await Promise.all(movePromises)
      
      console.log('‚úÖ All files moved successfully in Supabase Storage')
      return true
      
    } catch (error) {
      console.error('‚ùå Error moving Supabase folder:', error)
      return false
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö –ø–∞–ø–æ–∫
  const updateChildrenPaths = async (parentId: number, newParentPath: string) => {
    const children = await prisma.folder.findMany({
      where: { parentId: parentId }
    })

    for (const child of children) {
      const newChildPath = `${newParentPath}/${child.name}`
      await prisma.folder.update({
        where: { id: child.id },
        data: { path: newChildPath }
      })
      
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö –ø–∞–ø–æ–∫
      await updateChildrenPaths(child.id, newChildPath)
    }
  }

  try {
    console.log('üîç RenameFolder: Starting rename process', { folderId, newName })
    
    const cookieStore = await cookies()
    const sessionCookie = cookieStore.get('admin-session')
    
    if (!sessionCookie?.value) {
      console.log('‚ùå RenameFolder: No session cookie')
      return { success: false, error: 'Unauthorized' }
    }

    const user = JSON.parse(sessionCookie.value)

    if (!user?.id) {
      console.log('‚ùå RenameFolder: No user ID in session')
      return { success: false, error: 'User not found' }
    }

    console.log('üë§ RenameFolder: User info', { id: user.id, email: user.email })

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é Zod
    console.log('üîç RenameFolder: Input data before validation', { folderId, newName })
    const validationResult = renameFolderSchema.safeParse({
      id: folderId,
      name: newName.trim()
    })

    if (!validationResult.success) {
      const errorMessage = validationResult.error.issues[0]?.message || '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏'
      console.log('‚ùå RenameFolder: Validation failed', { error: errorMessage })
      return { success: false, error: errorMessage }
    }

    const validatedName = validationResult.data.name
    console.log('‚úÖ RenameFolder: Validation successful', { 
      originalInput: newName.trim(), 
      validatedName 
    })


    // –ù–∞—Ö–æ–¥–∏–º –ø–∞–ø–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîç RenameFolder: Looking for folder in database', { folderId })
    
    const folder = await prisma.folder.findUnique({
      where: { id: folderId },
      include: {
        parent: true,
        children: true,
        files: true
      }
    })

    console.log('üìÅ RenameFolder: Found folder', { 
      found: !!folder,
      folderId: folder?.id,
      name: folder?.name,
      ownerId: folder?.ownerId,
      path: folder?.path
    })

    if (!folder) {
      console.log('‚ùå RenameFolder: Folder not found in database')
      return { success: false, error: 'Folder not found' }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    console.log('üîê RenameFolder: Checking access rights', { 
      folderOwnerId: folder.ownerId, 
      userId: user.id,
      match: folder.ownerId === user.id 
    })
    
    if (folder.ownerId !== user.id) {
      console.log('‚ùå RenameFolder: Access denied')
      return { success: false, error: 'Access denied' }
    }

    // EDITOR –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å —Å–≤–æ–∏ –ø–∞–ø–∫–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –≤ –Ω–∏—Ö –µ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∞–π–ª—ã
    // (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤)

    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å
    const oldPath = folder.path
    let newPath: string
    
    console.log('üõ§Ô∏è RenameFolder: Calculating new path', { oldPath, newName: validatedName })
    
    if (folder.parent) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞, —Å–æ–∑–¥–∞–µ–º –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—ë
      newPath = `${folder.parent.path}/${validatedName}`
      console.log('üìÇ RenameFolder: Subfolder path', { parentPath: folder.parent.path, newPath })
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      newPath = `user_${user.id}/${validatedName}`
      console.log('üè† RenameFolder: Root folder path', { userId: user.id, newPath })
    }

    // –î–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (Supabase) –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
    // –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏ (path) –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫
    
    console.log('üìÅ Folder rename: Updating virtual paths for cloud storage')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    const storageProvider = process.env.STORAGE_PROVIDER || 'local'
    
    if (storageProvider === 'local') {
      // –¢–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –ø–∞–ø–∫—É
      try {
        const { rename } = await import('fs/promises')
        const { join } = await import('path')
        
        const oldAbsolutePath = join(process.cwd(), 'public', 'uploads', oldPath)
        const newAbsolutePath = join(process.cwd(), 'public', 'uploads', newPath)
        await rename(oldAbsolutePath, newAbsolutePath)
        console.log('üìÅ Local folder renamed successfully')
      } catch (fsError) {
        console.error('Failed to rename folder in filesystem:', fsError)
        return { success: false, error: 'Failed to rename folder on filesystem' }
      }
    } else {
      console.log('üìÅ Cloud storage: Performing physical folder move')
      
      // –î–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
      const moveSuccess = await moveSupabaseFolder(oldPath, newPath, folderId)
      if (!moveSuccess) {
        return { success: false, error: 'Failed to move files in cloud storage' }
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üíæ RenameFolder: Updating database record', { 
      folderId, 
      newName: validatedName, 
      newPath,
      isCloudStorage: process.env.STORAGE_PROVIDER === 'supabase'
    })
    
    // –î–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∏ –∏–º—è, –∏ –ø—É—Ç—å
    const updatedFolder = await prisma.folder.update({
      where: { id: folderId },
      data: {
        name: validatedName,
        path: newPath
      }
    })

    console.log('‚úÖ RenameFolder: Database updated successfully', { 
      id: updatedFolder.id,
      name: updatedFolder.name,
      path: updatedFolder.path
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö –ø–∞–ø–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    await updateChildrenPaths(folderId, newPath)

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞–ø–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ FileItem
    const folderResult = {
      id: updatedFolder.id,
      originalName: updatedFolder.name,
      filename: updatedFolder.name,
      mimeType: 'folder',
      size: 0,
      createdAt: updatedFolder.createdAt.toISOString(),
      url: `/uploads/${updatedFolder.path}`,
      isFolder: true,
      path: updatedFolder.path
    }

    return {
      success: true,
      folder: folderResult
    }

  } catch (error) {
    console.error('Rename folder error:', error)
    return { success: false, error: 'Failed to rename folder' }
  }
}
