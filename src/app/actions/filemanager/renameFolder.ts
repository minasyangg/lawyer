"use server"

import { PrismaClient } from '@prisma/client'
import { cookies } from 'next/headers'
import { updateChildrenVirtualPaths, generateVirtualPath } from '@/lib/virtualPaths'

const prisma = new PrismaClient()

export interface RenameFolderResult {
  success: boolean
  folder?: {
    id: number
    originalName: string
    filename: string
    mimeType: string
    size: number
    createdAt: string
    url: string
    isFolder: boolean
    path: string
  }
  error?: string
}

/**
 * –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–ø–∫—É
 * @param folderId ID –ø–∞–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
 * @param newName –Ω–æ–≤–æ–µ –∏–º—è –ø–∞–ø–∫–∏
 */
export async function renameFolder(folderId: number, newName: string): Promise<RenameFolderResult> {
  try {
    console.log('üîç RenameFolder: Starting rename process', { folderId, newName })
    
    const cookieStore = await cookies()
    const sessionCookie = cookieStore.get('admin-session')
    
    if (!sessionCookie?.value) {
      console.log('‚ùå RenameFolder: No session cookie')
      return { success: false, error: 'Unauthorized' }
    }

    const user = JSON.parse(sessionCookie.value)

    if (!user?.id) {
      console.log('‚ùå RenameFolder: No user ID in session')
      return { success: false, error: 'User not found' }
    }

    console.log('üë§ RenameFolder: User info', { id: user.id, email: user.email })

    if (!newName.trim()) {
      console.log('‚ùå RenameFolder: Empty folder name')
      return { success: false, error: 'Folder name required' }
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–∞–ø–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîç RenameFolder: Looking for folder in database', { folderId })
    
    const folder = await prisma.folder.findUnique({
      where: { id: folderId },
      include: {
        parent: true,
        children: true,
        files: true
      }
    })

    console.log('üìÅ RenameFolder: Found folder', { 
      found: !!folder,
      folderId: folder?.id,
      name: folder?.name,
      ownerId: folder?.ownerId,
      path: folder?.path
    })

    if (!folder) {
      console.log('‚ùå RenameFolder: Folder not found in database')
      return { success: false, error: 'Folder not found' }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    console.log('üîê RenameFolder: Checking access rights', { 
      folderOwnerId: folder.ownerId, 
      userId: user.id,
      match: folder.ownerId === user.id 
    })
    
    if (folder.ownerId !== user.id) {
      console.log('‚ùå RenameFolder: Access denied')
      return { success: false, error: 'Access denied' }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å
    const oldPath = folder.path
    let newPath: string
    
    console.log('üõ§Ô∏è RenameFolder: Calculating new path', { oldPath, newName: newName.trim() })
    
    if (folder.parent) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞, —Å–æ–∑–¥–∞–µ–º –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—ë
      newPath = `${folder.parent.path}/${newName.trim()}`
      console.log('üìÇ RenameFolder: Subfolder path', { parentPath: folder.parent.path, newPath })
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      newPath = `user_${user.id}/${newName.trim()}`
      console.log('üè† RenameFolder: Root folder path', { userId: user.id, newPath })
    }

    // –î–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (Supabase) –º—ã –Ω–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –ø–∞–ø–∫—É
    // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    // –§–∞–π–ª—ã –≤ Supabase Storage —Ö—Ä–∞–Ω—è—Ç—Å—è –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø—É—Ç—è–º –∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    
    console.log('üìÅ Folder rename: Updating database records only (cloud storage)')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    const storageProvider = process.env.STORAGE_PROVIDER || 'local'
    
    if (storageProvider === 'local') {
      // –¢–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –ø–∞–ø–∫—É
      try {
        const { rename } = await import('fs/promises')
        const { join } = await import('path')
        
        const oldAbsolutePath = join(process.cwd(), 'public', 'uploads', oldPath)
        const newAbsolutePath = join(process.cwd(), 'public', 'uploads', newPath)
        await rename(oldAbsolutePath, newAbsolutePath)
        console.log('üìÅ Local folder renamed successfully')
      } catch (fsError) {
        console.error('Failed to rename folder in filesystem:', fsError)
        return { success: false, error: 'Failed to rename folder on filesystem' }
      }
    } else {
      console.log('üìÅ Cloud storage: Skipping physical folder rename')
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö –ø–∞–ø–æ–∫
    const updateChildrenPaths = async (parentId: number, newParentPath: string) => {
      const children = await prisma.folder.findMany({
        where: { parentId: parentId }
      })

      for (const child of children) {
        const newChildPath = `${newParentPath}/${child.name}`
        await prisma.folder.update({
          where: { id: child.id },
          data: { path: newChildPath }
        })
        
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö –ø–∞–ø–æ–∫
        await updateChildrenPaths(child.id, newChildPath)
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üíæ RenameFolder: Updating database record', { 
      folderId, 
      newName: newName.trim(), 
      newPath 
    })
    
    const updatedFolder = await prisma.folder.update({
      where: { id: folderId },
      data: {
        name: newName.trim(),
        path: newPath
      }
    })

    console.log('‚úÖ RenameFolder: Database updated successfully', { 
      id: updatedFolder.id,
      name: updatedFolder.name,
      path: updatedFolder.path
    })

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏
    const newVirtualPath = await generateVirtualPath(folderId)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏
    await prisma.folder.update({
      where: { id: folderId },
      data: {
        virtualPath: newVirtualPath
      }
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö –ø–∞–ø–æ–∫
    await updateChildrenPaths(folderId, newPath)

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ —Ñ–∞–π–ª–æ–≤ –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ
    const filesInFolder = await prisma.file.findMany({
      where: { folderId: folderId }
    })
    
    for (const file of filesInFolder) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —Ñ–∞–π–ª–∞
      const fileName = file.path.split('/').pop() || file.filename
      const newFilePath = `uploads/${newPath}/${fileName}`
      
      await prisma.file.update({
        where: { id: file.id },
        data: { 
          path: newFilePath,
          virtualPath: newVirtualPath // –û–±–Ω–æ–≤–ª—è–µ–º –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å —Ñ–∞–π–ª–∞
        }
      })
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞–ø–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ FileItem
    const folderResult = {
      id: updatedFolder.id,
      originalName: updatedFolder.name,
      filename: updatedFolder.name,
      mimeType: 'folder',
      size: 0,
      createdAt: updatedFolder.createdAt.toISOString(),
      url: `/uploads/${updatedFolder.path}`,
      isFolder: true,
      path: updatedFolder.path
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
    await updateChildrenVirtualPaths(folderId, newVirtualPath)

    return {
      success: true,
      folder: folderResult
    }

  } catch (error) {
    console.error('Rename folder error:', error)
    return { success: false, error: 'Failed to rename folder' }
  }
}
