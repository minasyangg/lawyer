import { NextRequest, NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'
import { getFileUrl, getStorageInfo } from '@/lib/utils/universal-file-utils'
import { cookies } from 'next/headers'

const prisma = new PrismaClient()

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params
    let file = null
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ ID —á–∏—Å–ª–æ–≤—ã–º (–æ–±—ã—á–Ω—ã–π ID) –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–º (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π ID)
    const numericId = parseInt(id, 10)
    
    if (!isNaN(numericId)) {
      // –û–±—ã—á–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID
      file = await prisma.file.findUnique({
        where: { id: numericId },
        include: { folder: true }
      })
    } else {
      // –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π ID (—Å—Ç—Ä–æ–∫–∞ base64url)
      file = await prisma.file.findFirst({
        where: { virtualId: id },
        include: { folder: true }
      })
    }

    if (!file) {
      console.log(`‚ùå [File API] File not found for id: ${id}`)
      return NextResponse.json(
        { error: 'File not found' },
        { status: 404 }
      )
    }

    console.log(`üîç [File API] Found file:`, {
      id: file.id,
      virtualId: file.virtualId,
      originalName: file.originalName,
      isPublic: file.isPublic,
      isProtected: file.isProtected,
      uploadedBy: file.uploadedBy
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø - –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—É–±–ª–∏—á–Ω—ã–π, —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –≤—Å–µ–º
    if (file.isPublic) {
      // –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      console.log(`[Public File API] Serving public file:`, {
        id: file.id,
        virtualId: file.virtualId,
        originalName: file.originalName,
        isPublic: file.isPublic
      });
    } else {
      // –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
      const cookieStore = await cookies()
      const sessionCookie = cookieStore.get('admin-session')
      
      if (!sessionCookie?.value) {
        return NextResponse.json(
          { error: 'Unauthorized access to private file' },
          { status: 401 }
        )
      }

      const user = JSON.parse(sessionCookie.value)
      
      if (!user?.id) {
        return NextResponse.json(
          { error: 'User not found' },
          { status: 404 }
        )
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —Ñ–∞–π–ª—É
      // ADMIN –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã, EDITOR –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ —Ñ–∞–π–ª—ã
      if (user.userRole !== 'ADMIN' && file.uploadedBy !== user.id) {
        return NextResponse.json(
          { error: 'Access denied to private file' },
          { status: 403 }
        )
      }

      console.log(`[Private File API] Serving private file to authorized user:`, {
        id: file.id,
        virtualId: file.virtualId,
        originalName: file.originalName,
        userRole: user.userRole,
        isPublic: file.isPublic
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è
    const storageInfo = getStorageInfo();
    
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
      const fileUrl = await getFileUrl(file.path);
      
      console.log(`[File API] Redirecting ${storageInfo.provider} file:`, {
        virtualId: file.virtualId,
        path: file.path,
        url: fileUrl,
        isPublic: file.isPublic
      });
      
      // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
      return NextResponse.redirect(fileUrl);
      
    } catch (error) {
      console.error('[Virtual API] Error generating file URL:', error);
      
      return NextResponse.json(
        { error: 'Failed to generate file URL' },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error('Error serving file:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}