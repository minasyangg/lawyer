import { NextRequest, NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'
import { cookies } from 'next/headers'
import { getFileUrl } from '@/lib/utils/universal-file-utils'

const prisma = new PrismaClient()

/**
 * API route –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ virtualId
 * GET /api/files/virtual/[virtualId]
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∏ –ø—É–±–ª–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã
 */
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ virtualId: string }> }
) {
  try {
    const { virtualId } = await params
    
    // –ò—â–µ–º —Ñ–∞–π–ª –ø–æ virtualId
    const file = await prisma.file.findUnique({
      where: { virtualId },
      include: {
        uploader: true,
        folder: true
      }
    })

    if (!file) {
      console.log(`‚ùå [Virtual API] File not found for virtualId: ${virtualId}`)
      return NextResponse.json({ error: 'File not found' }, { status: 404 })
    }

    console.log(`üîç [Virtual API] Found file:`, {
      id: file.id,
      virtualId: file.virtualId,
      originalName: file.originalName,
      isPublic: file.isPublic,
      isProtected: file.isProtected,
      uploadedBy: file.uploadedBy
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –ø—É–±–ª–∏—á–Ω—ã–º
    if (file.isPublic) {
      // –ü—É–±–ª–∏—á–Ω—ã–π —Ñ–∞–π–ª - –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –≤—Å–µ–º
      console.log(`[Virtual API] Serving public file:`, {
        virtualId: file.virtualId,
        originalName: file.originalName,
        isPublic: file.isPublic
      });
    } else {
      // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ñ–∞–π–ª - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
      const cookieStore = await cookies()
      const sessionCookie = cookieStore.get('admin-session')
      
      if (!sessionCookie?.value) {
        return NextResponse.json({ error: 'Unauthorized access to private file' }, { status: 401 })
      }

      const user = JSON.parse(sessionCookie.value)
      
      if (!user?.id) {
        return NextResponse.json({ error: 'User not found' }, { status: 404 })
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —Ñ–∞–π–ª—É
      // ADMIN –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã, EDITOR –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ —Ñ–∞–π–ª—ã
      if (user.userRole !== 'ADMIN' && file.uploadedBy !== user.id) {
        return NextResponse.json({ error: 'Access denied to private file' }, { status: 403 })
      }

      console.log(`[Virtual API] Serving private file to authorized user:`, {
        virtualId: file.virtualId,
        originalName: file.originalName,
        userRole: user.userRole,
        isPublic: file.isPublic
      });
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL —Ñ–∞–π–ª–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      const fileUrl = await getFileUrl(file.path)
      
      // –ï—Å–ª–∏ —ç—Ç–æ –≤–Ω–µ—à–Ω–∏–π URL (S3, Supabase), –¥–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
      if (fileUrl.startsWith('http://') || fileUrl.startsWith('https://')) {
        return NextResponse.redirect(fileUrl, 302)
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π URL
      if (fileUrl.startsWith('/uploads/')) {
        return NextResponse.redirect(new URL(fileUrl, request.url), 302)
      }
      
      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π API route
      return NextResponse.redirect(new URL(`/api/files/${file.id}`, request.url), 302)
      
    } catch (storageError) {
      console.error('Storage error for file:', file.path, storageError)
      
      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π API route
      return NextResponse.redirect(new URL(`/api/files/${file.id}`, request.url), 302)
    }

  } catch (error) {
    console.error('Virtual file serving error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}