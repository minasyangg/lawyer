#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Prisma –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DIRECT_URL –¥–ª—è Supabase –º–∏–≥—Ä–∞—Ü–∏–π
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞
function loadEnvFile(filePath) {
  if (!fs.existsSync(filePath)) {
    console.error(`‚ùå Env file not found: ${filePath}`);
    process.exit(1);
  }

  const envContent = fs.readFileSync(filePath, 'utf-8');
  const envVars = {};

  envContent.split('\n').forEach(line => {
    const trimmed = line.trim();
    if (trimmed && !trimmed.startsWith('#')) {
      const [key, ...valueParts] = trimmed.split('=');
      if (key && valueParts.length > 0) {
        let value = valueParts.join('=');
        // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏
        if ((value.startsWith('"') && value.endsWith('"')) || 
            (value.startsWith("'") && value.endsWith("'"))) {
          value = value.slice(1, -1);
        }
        envVars[key] = value;
      }
    }
  });

  return envVars;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function runPrismaCommand() {
  const [command, ...args] = process.argv.slice(2);
  
  if (!command) {
    console.log('Usage: node prisma-runner.js <prisma-command> [args...]');
    console.log('Example: node prisma-runner.js migrate deploy --prod');
    process.exit(1);
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–¥—É
  const isProd = args.includes('--prod');
  const envFile = isProd ? '.env.production' : '.env.local';
  const envPath = path.join(process.cwd(), envFile);
  
  console.log(`üìä Loading environment from: ${envFile}`);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const envVars = loadEnvFile(envPath);
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ process.env
  Object.assign(process.env, envVars);
  
  // –î–ª—è Supabase –º–∏–≥—Ä–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º DIRECT_URL
  if (isProd && (command === 'migrate' || command === 'db')) {
    if (envVars.DIRECT_URL) {
      console.log('üîß Using DIRECT_URL for Supabase migration (bypassing pgbouncer)');
      process.env.DATABASE_URL = envVars.DIRECT_URL;
    }
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
  const filteredArgs = args.filter(arg => arg !== '--prod');
  const prismaCommand = `npx prisma ${command} ${filteredArgs.join(' ')}`.trim();
  
  console.log(`üöÄ Executing: ${prismaCommand}`);
  console.log(`üîó Database: ${process.env.DATABASE_URL?.substring(0, 50)}...`);
  
  try {
    execSync(prismaCommand, { 
      stdio: 'inherit',
      cwd: process.cwd(),
      env: process.env
    });
    console.log('‚úÖ Command completed successfully!');
  } catch (error) {
    console.error('‚ùå Command failed:', error.message);
    process.exit(1);
  }
}

runPrismaCommand();
