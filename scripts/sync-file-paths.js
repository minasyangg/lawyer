#!/usr/bin/env node

/**
 * CLI –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—É—Ç–µ–π —Ñ–∞–π–ª–æ–≤
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run sync-file-paths
 */

const { PrismaClient } = require('@prisma/client')
const fs = require('fs').promises

const prisma = new PrismaClient()

async function syncFilePaths() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—É—Ç–µ–π —Ñ–∞–π–ª–æ–≤...')
  
  try {
    const allFiles = await prisma.file.findMany({
      include: {
        folder: {
          include: {
            parent: true
          }
        }
      }
    })

    let updatedCount = 0
    let errorCount = 0

    for (const file of allFiles) {
      try {
        const correctPath = await calculateFilePath(file)
        
        if (correctPath && correctPath !== file.path) {
          await prisma.file.update({
            where: { id: file.id },
            data: { path: correctPath }
          })
          
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: ${file.originalName} -> ${correctPath}`)
          updatedCount++
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ ${file.originalName}:`, error.message)
        errorCount++
      }
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:`)
    console.log(`   - –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${updatedCount}`)
    console.log(`   - –û—à–∏–±–æ–∫: ${errorCount}`)
    console.log(`   - –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${allFiles.length}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏ –≤ —Å—Ç–∞—Ç—å—è—Ö
    await checkArticleLinks()

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error)
  } finally {
    await prisma.$disconnect()
  }
}

async function calculateFilePath(file) {
  if (!file.folder) {
    return `uploads/${file.filename}`
  }
  
  const folderPath = await calculateFolderPath(file.folder.id)
  return `uploads/${folderPath}/${file.filename}`
}

async function calculateFolderPath(folderId) {
  const folder = await prisma.folder.findUnique({
    where: { id: folderId },
    include: { parent: true }
  })
  
  if (!folder) return ''
  
  if (!folder.parent) {
    return folder.name
  }
  
  const parentPath = await calculateFolderPath(folder.parent.id)
  return `${parentPath}/${folder.name}`
}

async function checkArticleLinks() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Å—Ç–∞—Ç—å—è—Ö...')
  
  const articles = await prisma.article.findMany({
    where: {
      documents: {
        not: null
      }
    }
  })

  let brokenLinksCount = 0

  for (const article of articles) {
    try {
      const documentIds = JSON.parse(article.documents)
      const validIds = []

      for (const fileId of documentIds) {
        const file = await prisma.file.findUnique({
          where: { id: fileId }
        })

        if (file) {
          validIds.push(fileId)
        } else {
          console.log(`‚ö†Ô∏è  –ë–∏—Ç–∞—è —Å—Å—ã–ª–∫–∞ –≤ —Å—Ç–∞—Ç—å–µ "${article.title}": —Ñ–∞–π–ª ID ${fileId} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
          brokenLinksCount++
        }
      }

      if (validIds.length !== documentIds.length) {
        console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é: ${article.title}`)
        await prisma.article.update({
          where: { id: article.id },
          data: {
            documents: JSON.stringify(validIds)
          }
        })
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ç—å–µ "${article.title}":`, error.message)
    }
  }

  console.log(`   - –ù–∞–π–¥–µ–Ω–æ –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫: ${brokenLinksCount}`)
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
syncFilePaths()
