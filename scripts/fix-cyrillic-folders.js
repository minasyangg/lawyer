#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–ø–æ–∫ —Å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
 * –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫ –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Supabase Storage
 */

const { PrismaClient } = require('@prisma/client')

// –ö–∞—Ä—Ç–∞ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ (—Ç–∞–∫–∞—è –∂–µ –∫–∞–∫ –≤ folder-validation.ts)
const TRANSLITERATION_MAP = {
  // –†—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã (—Å—Ç—Ä–æ—á–Ω—ã–µ)
  '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
  '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
  '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
  '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'shch',
  '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
  
  // –†—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã (–∑–∞–≥–ª–∞–≤–Ω—ã–µ)
  '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'Yo',
  '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
  '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
  '–§': 'F', '–•': 'Kh', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Shch',
  '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya',
  
  // –ü—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  ' ': '_',
  '-': '_',
  '.': '_',
  ',': '_',
  '!': '',
  '?': '',
  ':': '',
  ';': '',
  '"': '',
  "'": '',
  '(': '',
  ')': '',
  '[': '',
  ']': '',
  '{': '',
  '}': '',
  '@': '',
  '#': '',
  '$': '',
  '%': '',
  '^': '',
  '&': '',
  '*': '',
  '+': '',
  '=': '',
  '|': '',
  '\\': '',
  '/': '_',
  '<': '',
  '>': ''
}

/**
 * –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
 */
function transliterate(text) {
  return text
    .split('')
    .map(char => TRANSLITERATION_MAP[char] || char)
    .join('')
    .replace(/[^a-zA-Z0-9_-]/g, '') // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    .replace(/_{2,}/g, '_') // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –æ–¥–Ω–æ
    .replace(/^_+|_+$/g, '') // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    .toLowerCase()
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
 */
function hasCyrillic(text) {
  return /[–∞-—è—ë]/i.test(text)
}

async function fixCyrillicFolders() {
  const prisma = new PrismaClient()
  
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –ø–∞–ø–æ–∫ —Å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏...')
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–∞–ø–∫–∏
    const folders = await prisma.folder.findMany({
      include: {
        files: true,
        children: true
      }
    })
    
    const cyrillicFolders = folders.filter(folder => hasCyrillic(folder.name))
    
    if (cyrillicFolders.length === 0) {
      console.log('‚úÖ –ü–∞–ø–∫–∏ —Å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
      return
    }
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${cyrillicFolders.length} –ø–∞–ø–æ–∫ —Å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏:`)
    
    const updates = []
    
    for (const folder of cyrillicFolders) {
      const oldName = folder.name
      const newName = transliterate(oldName)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ–µ –∏–º—è –Ω–µ –ø—É—Å—Ç–æ–µ
      if (!newName) {
        console.log(`‚ö†Ô∏è  –ü–∞–ø–∫–∞ "${oldName}" (ID: ${folder.id}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞`)
        continue
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ–µ –∏–º—è —É–Ω–∏–∫–∞–ª—å–Ω–æ —Å—Ä–µ–¥–∏ siblings
      const siblings = await prisma.folder.findMany({
        where: {
          parentId: folder.parentId,
          id: { not: folder.id }
        }
      })
      
      let finalName = newName
      let counter = 1
      
      while (siblings.some(sibling => sibling.name === finalName)) {
        finalName = `${newName}_${counter}`
        counter++
      }
      
      updates.push({
        folder,
        oldName,
        newName: finalName
      })
      
      console.log(`  "${oldName}" ‚Üí "${finalName}" (ID: ${folder.id})`)
    }
    
    if (updates.length === 0) {
      console.log('‚ö†Ô∏è  –ù–µ—Ç –ø–∞–ø–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
      return
    }
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    console.log(`\n‚ùì –û–±–Ω–æ–≤–∏—Ç—å ${updates.length} –ø–∞–ø–æ–∫? (y/N):`)
    
    // –í Node.js —Å–∫—Ä–∏–ø—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    const readline = require('readline')
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    })
    
    rl.question('', async (answer) => {
      if (answer.toLowerCase() !== 'y' && answer.toLowerCase() !== 'yes') {
        console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
        rl.close()
        await prisma.$disconnect()
        return
      }
      
      console.log('\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–ø–æ–∫...')
      
      for (const update of updates) {
        try {
          await prisma.folder.update({
            where: { id: update.folder.id },
            data: { name: update.newName }
          })
          
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: "${update.oldName}" ‚Üí "${update.newName}"`)
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ "${update.oldName}":`, error.message)
        }
      }
      
      console.log('\n‚ú® –ì–æ—Ç–æ–≤–æ!')
      console.log('\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –í–∞–º –Ω—É–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–ø–∫–∏ –≤ Supabase Storage –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
      
      rl.close()
      await prisma.$disconnect()
    })
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
    await prisma.$disconnect()
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  fixCyrillicFolders()
}