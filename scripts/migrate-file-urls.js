/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ URL —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Ö—Ä–∞–Ω–µ–Ω–∏—è
 */

import { PrismaClient } from '@prisma/client';
import { getStorageInfo } from '../src/lib/utils/universal-file-utils';

const prisma = new PrismaClient();

interface MigrationStats {
  totalFiles: number;
  migrated: number;
  skipped: number;
  errors: number;
}

/**
 * –ú–∏–≥—Ä–∏—Ä—É–µ—Ç URL —Ñ–∞–π–ª–æ–≤ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
 */
async function migrateFileUrls(): Promise<MigrationStats> {
  const stats: MigrationStats = {
    totalFiles: 0,
    migrated: 0,
    skipped: 0,
    errors: 0
  };

  try {
    const storageInfo = getStorageInfo();
    console.log(`üîß Starting file URL migration for ${storageInfo.provider} provider...`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const files = await prisma.file.findMany({
      select: {
        id: true,
        originalName: true,
        filename: true,
        path: true,
        uploadedBy: true
      }
    });

    stats.totalFiles = files.length;
    console.log(`üìÅ Found ${files.length} files to process`);

    for (const file of files) {
      try {
        let needsUpdate = false;
        let newPath = file.path;

        if (storageInfo.isLocal) {
          // –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
          if (file.path.startsWith('https://')) {
            // –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–µ–π—á–∞—Å –≤ –æ–±–ª–∞–∫–µ, –∞ –º—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∞—Ç—å
            console.log(`‚ö†Ô∏è  Skipping cloud file (needs manual download): ${file.originalName}`);
            stats.skipped++;
            continue;
          } else if (!file.path.startsWith('uploads/') && !file.path.startsWith('/uploads/')) {
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
            newPath = `uploads/user_${file.uploadedBy}/${file.filename}`;
            needsUpdate = true;
          }
        } else if (storageInfo.isSupabase) {
          // –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è Supabase –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
          if (!file.path.startsWith('https://')) {
            // –ï—Å–ª–∏ —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω—ã–π, –∞ –º—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Supabase
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å
            console.log(`‚ö†Ô∏è  Skipping local file (needs manual upload): ${file.originalName}`);
            stats.skipped++;
            continue;
          }
        }

        if (needsUpdate) {
          await prisma.file.update({
            where: { id: file.id },
            data: { path: newPath }
          });

          console.log(`‚úÖ Migrated: ${file.originalName} -> ${newPath}`);
          stats.migrated++;
        } else {
          stats.skipped++;
        }

      } catch (error) {
        console.error(`‚ùå Error migrating file ${file.originalName}:`, error);
        stats.errors++;
      }
    }

    console.log('\nüìä Migration Summary:');
    console.log(`   Total files: ${stats.totalFiles}`);
    console.log(`   Migrated: ${stats.migrated}`);
    console.log(`   Skipped: ${stats.skipped}`);
    console.log(`   Errors: ${stats.errors}`);

    return stats;

  } catch (error) {
    console.error('üí• Migration failed:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function checkFileStatus(): Promise<void> {
  try {
    console.log('üîç Checking file status...');

    const files = await prisma.file.findMany({
      select: {
        id: true,
        originalName: true,
        path: true,
        createdAt: true
      },
      orderBy: { createdAt: 'desc' },
      take: 10
    });

    console.log('\nüìã Recent files:');
    files.forEach((file, index) => {
      const isLocal = !file.path.startsWith('https://');
      const icon = isLocal ? 'üìÅ' : '‚òÅÔ∏è';
      console.log(`   ${index + 1}. ${icon} ${file.originalName} -> ${file.path}`);
    });

    const totalFiles = await prisma.file.count();
    const localFiles = await prisma.file.count({
      where: {
        path: {
          not: {
            startsWith: 'https://'
          }
        }
      }
    });
    const cloudFiles = totalFiles - localFiles;

    console.log('\nüìä File distribution:');
    console.log(`   üìÅ Local files: ${localFiles}`);
    console.log(`   ‚òÅÔ∏è  Cloud files: ${cloudFiles}`);
    console.log(`   üìÑ Total files: ${totalFiles}`);

  } catch (error) {
    console.error('Error checking file status:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  const command = process.argv[2];

  switch (command) {
    case 'migrate':
      migrateFileUrls()
        .then(stats => {
          console.log('‚úÖ Migration completed successfully!');
          process.exit(0);
        })
        .catch(error => {
          console.error('‚ùå Migration failed:', error);
          process.exit(1);
        });
      break;

    case 'check':
      checkFileStatus()
        .then(() => {
          console.log('‚úÖ Check completed!');
          process.exit(0);
        })
        .catch(error => {
          console.error('‚ùå Check failed:', error);
          process.exit(1);
        });
      break;

    default:
      console.log('üìñ Usage:');
      console.log('   node scripts/migrate-file-urls.js check   - Check current file status');
      console.log('   node scripts/migrate-file-urls.js migrate - Migrate file URLs');
      process.exit(1);
  }
}

export { migrateFileUrls, checkFileStatus };
